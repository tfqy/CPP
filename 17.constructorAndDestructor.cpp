#include <iostream>
using namespace std;
#include <string>

// 对象的初始化和清理
// 1、构造函数 进行初始化操作

class Person
{
public: // 无论是构造函数还是析构函数都是在public作用域下
  // 1.1、构造函数
  // 没有返回值 不用写void
  // 函数名 与类名相同
  // 构造函数可以有参数，可以发生重载
  // 创建对象的时候，构造函数会自动调用，而且只调用一次
  Person()
  {
    cout << "Person 构造函数的调用" << endl;
  }

  /*
  如果你不写，编译器会自动创建一个，但是里面是空语句
  Person()
  {

  }
  */

  // 1. 析构函数，，没有返回值也不写void。
  // 2. 函数名称与类名相同，在名称前加上符号。
  // 3. 析构函数不可以有参数，因此不可以发生重载。
  // 4. 程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次。
  ~Person()
  {
    cout << "Person 析构函数的调用" << endl;
  }
};

// 构造和析构都是必须有的实现，如果我们自己不提供，编译器会提供一个空实现
void test01()
{
  Person p; // 创建对象的时候，自动调用构造函数
            // 这个对象p是一个局部变量，是在栈上的数据，test01执行完，释放这个对象
}

int main()
{

  // 方式一：
  test01(); // 析构释放时机在test01运行完前，test01函数运行完后，里面的对象就被释放了

  /*
  方式二：     //创建对象的时候，自动调用构造函数
  Person p;   //只有构造函数，没有析构函数，只有main函数结束完前，对象要释放掉了，才会调用析构函数
  */
  return 0;
}